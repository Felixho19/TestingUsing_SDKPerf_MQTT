---
- name: Provision Client on EC2
  local_action:
        module: ec2
        key_name: "{{ ec2_keypair }}"
        group_id: "{{ ec2_security_group }}"
        instance_type: "{{ ec2_instance_type }}"
        image: "{{ ec2_image }}"
#     vpc_subnet_id: "{{ ec2_subnet_ids|random }}"
#     assign_public_ip: yes
        region: "{{ ec2_region }}"
        wait: yes
        # Running the script multiple times results in only one instance
        exact_count: 1
        count_tag: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}' 
        instance_tags: '{"Name":"{{ec2_tag_Name}}","Type":"{{ec2_tag_Type}}","Environment":"{{ec2_tag_Environment}}"}'
        volumes: 
            - device_name: /dev/xvda
              device_type: gp2
              volume_size: "{{ ec2_volume_size }}"
              delete_on_termination: true
  register: ec2

- debug: var=item
  with_items: "{{ ec2.instances }}"

- name: Add instance to local host group
  local_action: 
    module: lineinfile 
    dest: inventory.yml 
    regexp: "{{ item.public_dns_name }}" 
    insertafter: "[launched]" 
    line: "{{ item.public_dns_name }} ansible_python_interpreter=/usr/bin/python ec2_instanceid={{ item.id }} ec2_region={{ item.region }} ec2_public_ip={{ item.public_ip }} ansible_ssh_user=centos"
  with_items: "{{ ec2.instances }}"

- name: Add all instance public IPs to in-memory host group
  add_host:
    name={{ item.public_ip }}
    groups=tag_Type_{{ec2_tag_Type}},tag_Environment_{{ec2_tag_Environment}},launched
    ec2_region={{ec2_region}} 
    ec2_tag_Name={{ec2_tag_Name}}
    ec2_tag_Type={{ec2_tag_Type}}
    ec2_tag_Environment={{ec2_tag_Environment}}
    ec2_ip_address={{item.public_ip}}
  with_items: "{{ ec2.instances }}"

- name: Wait for the instances to boot by checking the ssh port
  local_action:
    module: wait_for 
    host: "{{item.public_ip}}"
    port: 22
    delay: 60
    timeout: 320
    state: started
  with_items: "{{ ec2.instances }}"


